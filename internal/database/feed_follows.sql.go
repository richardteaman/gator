// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: feed_follows.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFeedFollow = `-- name: CreateFeedFollow :one
with inserted as (
    insert into feed_follows (
        id,
        created_at,
        updated_at,
        user_id,
        feed_id
    ) values (
        $1,$2,$3,$4,$5
    )
    returning id, created_at, updated_at, user_id, feed_id
)
select
    inserted.id,
    inserted.user_id,
    inserted.feed_id,
    inserted.created_at,
    inserted.updated_at,
    users.name as user_name,
    feeds.name as feed_name
from inserted
join users on users.id = inserted.user_id
join feeds on feeds.id = inserted.feed_id
`

type CreateFeedFollowParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserID    uuid.UUID
	FeedID    uuid.UUID
}

type CreateFeedFollowRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) CreateFeedFollow(ctx context.Context, arg CreateFeedFollowParams) (CreateFeedFollowRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollow,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.UserID,
		arg.FeedID,
	)
	var i CreateFeedFollowRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FeedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserName,
		&i.FeedName,
	)
	return i, err
}

const deleteFeedFollow = `-- name: DeleteFeedFollow :exec
delete from feed_follows
where feed_follows.user_id = $1 
and feed_id = (select id from feeds where url = $2 limit 1)
`

type DeleteFeedFollowParams struct {
	UserID uuid.UUID
	Url    string
}

func (q *Queries) DeleteFeedFollow(ctx context.Context, arg DeleteFeedFollowParams) error {
	_, err := q.db.ExecContext(ctx, deleteFeedFollow, arg.UserID, arg.Url)
	return err
}

const getFeedFollowForUserAndFeed = `-- name: GetFeedFollowForUserAndFeed :one
SELECT id, created_at, updated_at, user_id, feed_id FROM feed_follows 
WHERE user_id = $1 AND feed_id = $2 
LIMIT 1
`

type GetFeedFollowForUserAndFeedParams struct {
	UserID uuid.UUID
	FeedID uuid.UUID
}

func (q *Queries) GetFeedFollowForUserAndFeed(ctx context.Context, arg GetFeedFollowForUserAndFeedParams) (FeedFollow, error) {
	row := q.db.QueryRowContext(ctx, getFeedFollowForUserAndFeed, arg.UserID, arg.FeedID)
	var i FeedFollow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
	)
	return i, err
}

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
select  
    feed_follows.id,
    feed_follows.user_id,
    feed_follows.feed_id,
    feed_follows.created_at,
    feed_follows.updated_at,
    users.name as user_name,
    feeds.name as feed_name
from feed_follows
join feeds on feeds.id = feed_follows.feed_id
join users on users.id = feed_follows.user_id
where feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	FeedID    uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	UserName  string
	FeedName  string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FeedID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.UserName,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
